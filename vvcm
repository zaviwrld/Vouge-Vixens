vogue-vixens/
├── backend/
│   ├── controllers/
│   ├── models/
│   ├── routes/
│   ├── app.js
│   ├── config/
│   └── server.js
├── frontend/
│   ├── public/
│   ├── src/
│   │   ├── components/
│   │   ├── pages/
│   │   ├── App.js
│   │   ├── index.js
│   │   ├── styles/
│   └── tailwind.config.js
├── package.json
└── README.md
npx create-react-app vogue-vixens-frontend
cd vogue-vixens-frontend
npm install tailwindcss postcss autoprefixer
npx tailwindcss init -p
module.exports = {
  purge: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],
  darkMode: false,
  theme: {
    extend: {
      colors: {
        black: '#000000',
        silver: '#C0C0C0',
        grey: '#808080',
        roseGold: '#B76E79',
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
@tailwind base;
@tailwind components;
@tailwind utilities;
import React from 'react';

const Header = () => (
  <header className="bg-black text-roseGold p-4">
    <div className="container mx-auto flex justify-between items-center">
      <h1 className="text-3xl font-bold">Vogue Vixens</h1>
      <nav>
        <a href="/" className="mx-2">Home</a>
        <a href="/models" className="mx-2">Models</a>
        <a href="/portal" className="mx-2">Portal</a>
        <a href="/contact" className="mx-2">Contact</a>
      </nav>
    </div>
  </header>
);

export default Header;
mkdir vogue-vixens-backend
cd vogue-vixens-backend
npm init -y
npm install express mongoose bcryptjs jsonwebtoken stripe cors
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

mongoose.connect('mongodb://localhost/vogue-vixens', { useNewUrlParser: true, useUnifiedTopology: true });

const modelRouter = require('./routes/models');
const userRouter = require('./routes/users');

app.use('/api/models', modelRouter);
app.use('/api/users', userRouter);

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

router.post('/register', async (req, res) => {
  const { name, email, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ name, email, password: hashedPassword });
  await user.save();
  res.status(201).send('User Registered');
});

router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ email });
  if (!user) return res.status(404).send('User not found');
  
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).send('Invalid credentials');

  const token = jwt.sign({ userId: user._id }, 'your_jwt_secret');
  res.json({ token });
});

module.exports = router;
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

module.exports = mongoose.model('User', UserSchema);
const express = require('express');
const router = express.Router();
const stripe = require('stripe')('your_stripe_secret_key');

router.post('/charge', async (req, res) => {
  const { amount, source } = req.body;
  try {
    const charge = await stripe.charges.create({
      amount,
      currency: 'usd',
      source,
      description: 'Vogue Vixens Service Charge',
    });
    res.status(200).json(charge);
  } catch (error) {
    res.status(500).json(error);
  }
});

module.exports = router;
